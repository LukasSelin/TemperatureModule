@page "/"
@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.ChartJS.Common
@using ChartJs.Blazor.ChartJS.Common.Properties
@using ChartJs.Blazor.ChartJS.Common.Enums
@using ChartJs.Blazor.ChartJS.LineChart
@using ChartJs.Blazor.ChartJS.Common.Axes
@using ChartJs.Blazor.ChartJS.Common.Axes.Ticks
@using ChartJs.Blazor.ChartJS.Common.Handlers
@using ChartJs.Blazor.Util
@using Newtonsoft.Json.Linq;
@using System.Linq
@using System.Diagnostics
@using TemperatureModuleDatasource
@using TemperatureModule.Webpage.Models

@using TemperatureModule.Webpage.Components

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, shrink-to-fit=no">
    <title>startpage</title>
    <link rel="stylesheet" href="/assets/bootstrap/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Bitter:400,700">
    <link rel="stylesheet" href="/assets/css/styles.min.css">
</head>

<body style="color: #f4f7f5;background-color: #08090a;">
    
        <GraphControllPanelComponent DateUpdated="DateUpdated" SelectUpdated="@FilterUpdated" StartDate="StartDate" EndDate="EndDate"></GraphControllPanelComponent>
        <CarouselComponent UnitData="UnitData"></CarouselComponent>

        <UnitListComponent></UnitListComponent>
</body>
@code
{
    public TempraturModul.Models.TempratureDTO[] UnitData { get; set; }

    public string Selection { get; set; } = "Today";

    public DateTimeOffset? StartDate { get; set; }
    public DateTimeOffset? EndDate { get; set; }

    public async Task DateUpdated(BlazorDateRangePicker.DateRange dateRange)
    {
        var data = new Datasource(new HttpClient());
        UnitData = (await data.GetDaysAsync(dateRange.Start.DateTime, dateRange.End.DateTime)).ToArray();
        StartDate = dateRange.Start;
        EndDate = dateRange.End;
    }

    // Todo add more support for more filters
    public async Task FilterUpdated(FilterEnum selection)
    {
        var data = new Datasource(new HttpClient());

        switch (selection)
        {
            case FilterEnum.Today:
                var today = DateTime.Today;
                UnitData = (await data.GetDayAsync(today)).ToArray();
                StartDate = today;
                EndDate = today;
                break;

            case FilterEnum.Yesterday:
                var yesterday = DateTime.Today.AddDays(-1);
                UnitData = (await data.GetDayAsync(yesterday)).ToArray();
                StartDate = yesterday;
                EndDate = yesterday;

                break;

            case FilterEnum.OneDay:
                break;

            case FilterEnum.ThreeDays:
                var threedaySpan = DateTime.Today.AddDays(-3);
                UnitData = (await data.GetDaysAsync(threedaySpan, DateTime.Today)).ToArray();
                StartDate = threedaySpan;
                EndDate = DateTime.Today;
                break;

            case FilterEnum.OneWeek:
                break;

            case FilterEnum.TwoWeeks:
                break;

            case FilterEnum.OneMonth:
                break;

            case FilterEnum.ThreeMonths:
                break;

            case FilterEnum.OneYear:
                break;

        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var data = new Datasource(new HttpClient());
            UnitData = (await data.GetDayAsync(DateTime.Now)).ToArray();
            StartDate = DateTime.Today;
        }
        catch
        {
            System.Diagnostics.Debug.WriteLine("Nu var vi här");
        }
    }
}