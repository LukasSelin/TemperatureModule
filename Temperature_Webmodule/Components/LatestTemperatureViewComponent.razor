@using  TempraturModul.Models

@if (unitData != null)
{
  
    @foreach (KeyValuePair<string, UnitData> kvp in keyValues)
    {
        @if (kvp.Key == "Latest Temperature")
        {
            <div class="d-xl-flex justify-content-xl-start align-items-xl-center" style="padding-top: 12px;padding-left: 20px;padding-bottom: 12px;font-size: 30px;border: 1px solid rgba(0,0,0,.125);">
                <strong class="text-left d-flex d-xl-flex align-items-center align-items-xl-center">@kvp.Key:</strong>
                <p class="text-center d-flex d-xl-flex align-items-center justify-content-xl-center" style="margin-left: 7px;margin-bottom: 0px;"><br><strong>@kvp.Value.DataPTValue °C</strong>&nbsp;</p>
            </div>

            <div style="margin-top: 15px;"></div>
        }
        else
        {
            <div class="d-flex d-xl-flex justify-content-start align-items-center justify-content-xl-start align-items-xl-center" style="padding-top: 12px;padding-bottom: 12px;padding-left: 20px;">
                <strong class="text-left d-xl-flex align-items-xl-center">@kvp.Key:</strong>
                <p class="text-center d-flex d-xl-flex align-items-center justify-content-xl-center" style="margin-left: 7px;margin-bottom: 0px;"><br><strong>@kvp.Value.DataPTValue °C</strong>&nbsp;</p>
            </div>
        }
    }
}
else
{
    <div class="d-xl-flex justify-content-xl-start align-items-xl-center" style="padding-top: 12px;padding-left: 20px;padding-bottom: 12px;font-size: 30px;border: 1px solid rgba(0,0,0,.125);">
        <strong>Loading</strong>
    </div>
}



@code {
    [CascadingParameter]
    public TempraturModul.Models.TempratureDTO[] unitData { get; set; }

    private Dictionary<string, TempraturModul.Models.UnitData> keyValues = new Dictionary<string, TempraturModul.Models.UnitData>();

    protected override async Task OnParametersSetAsync()
    {
        if (unitData != null)
        {
            keyValues.Clear();
            double allTemp = 0;

            foreach (var unit in unitData[0].UnitDataPT)
            {
                allTemp += unit.DataPTValue;
            }
            var todayAverage = Math.Round(allTemp / unitData[0].UnitDataPT.Count, 1);

            var highestRecord = GetHighestRecord(unitData[0].UnitDataPT);
            var lowestRecord = GetLowestRecord(unitData[0].UnitDataPT);

            keyValues.Add("Latest Temperature", unitData[0].UnitDataPT.Last());
            keyValues.Add("Highest temperature", highestRecord);
            keyValues.Add("Lowest temperature", lowestRecord);


            //keyValues.Add("Average temperature", unitData[0].UnitDataPT.Average(u => u.DataPTValue));

        }
    }

    private UnitData GetHighestRecord(List<UnitData> units)
    {
        var data = units.Max(i => i.DataPTValue);
        var unit = units.Where(i => i.DataPTValue == data).ToArray();

        return unit[0];
    }

    private UnitData GetLowestRecord(List<UnitData> units)
    {
        var data = units.Min(i => i.DataPTValue);
        var unit = units.Where(i => i.DataPTValue == data).ToArray();

        return unit[0];
    }

}
