@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.ChartJS.Common.Enums
@using ChartJs.Blazor.ChartJS.LineChart
@using ChartJs.Blazor.ChartJS.Common.Axes
@using ChartJs.Blazor.ChartJS.Common.Time
@using System.Linq
@using TemperatureModuleDatasource

@using System.Diagnostics

<div class="center-block graph" style="min-height: 250px; margin-right: 5px">
    <ChartJsLineChart @ref="_lineChartJs" Config="@_lineChartConfig" Height="400"></ChartJsLineChart>
</div>

@code {
    [CascadingParameter]
    public TempraturModul.Models.TempratureDTO[] unitData { get; set; }

    private LineConfig _lineChartConfig;
    private ChartJsLineChart _lineChartJs;

    protected async override Task OnInitializedAsync()
    {
        _lineChartConfig = new LineConfig()
        {
            Options = new ChartJs.Blazor.ChartJS.LineChart.LineOptions()
            {
                MaintainAspectRatio = false,
                Responsive = true,
                Legend = new ChartJs.Blazor.ChartJS.Common.Handlers.Legend
                {
                    Display = true
                },
                Scales = new Scales
                {
                    xAxes = new List<CartesianAxis>
                {
                        new TimeAxis
                        {
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Time"
                            },
                            Position = Position.Bottom,
                            Time = new ChartJs.Blazor.ChartJS.Common.Time.TimeOptions
                            {
                                DisplayFormats = ChartJs.Blazor.ChartJS.Common.Time.TimeDisplayFormats.DE_CH
                            }
                        }
                    },
                    yAxes = new List<CartesianAxis>
                    {
                        new LinearCartesianAxis
                        {
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Temp. °C"
                            },
                            Ticks = new ChartJs.Blazor.ChartJS.Common.Axes.Ticks.LinearCartesianTicks
                            {
                                SuggestedMin = 0,
                                SuggestedMax = 45
                                
                            }

                        }
                    }
                }
            }
        };
    }

    protected override async Task OnParametersSetAsync()
    {
        _lineChartConfig.Data.Datasets.Clear();



        var airTempratureDataset = new LineDataset<TimeTuple<double>>()
        {
            BackgroundColor = "#f3ff00",
            BorderColor = "#f3ff00",
            BorderWidth = 2,
            Fill = false,
            PointRadius = 4,
            ShowLine = true,
            Label = "Air temperature"
        };

        var waterTempratureDataset = new LineDataset<ChartJs.Blazor.ChartJS.Common.Time.TimeTuple<double>>()
        {
            BackgroundColor = "#1a5fff",
            BorderColor = "#1a5fff",
            BorderWidth = 2,
            Fill = false,
            PointRadius = 4,
            ShowLine = true,
            Label = "Water temperature"
        };

        if (unitData != null)
        {
            foreach (var dataPoint in unitData[0].UnitDataPT)
            {
                if(dataPoint.PTIndex == 0)
                {
                    airTempratureDataset.Add(new TimeTuple<double>(
                        new Moment(dataPoint.DataDateTime), dataPoint.DataPTValue));
                }
                else if(dataPoint.PTIndex == 1)
                {
                    waterTempratureDataset.Add(new TimeTuple<double>(
                        new Moment(dataPoint.DataDateTime), dataPoint.DataPTValue));
                }
            }

            Debug.WriteLine("Adding {0} air tempratures to the graph", airTempratureDataset.Data.Count);
            _lineChartConfig.Data.Datasets.Add(airTempratureDataset);
            Debug.WriteLine("Adding {0} water tempratures to the graph", airTempratureDataset.Data.Count);
            _lineChartConfig.Data.Datasets.Add(waterTempratureDataset);

        }
    }
}
