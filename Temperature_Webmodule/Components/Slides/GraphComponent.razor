@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.ChartJS.Common.Enums
@using ChartJs.Blazor.ChartJS.LineChart
@using ChartJs.Blazor.ChartJS.Common.Axes
@using ChartJs.Blazor.ChartJS.Common.Time
@using System.Linq
@using TemperatureModuleDatasource
@using TemperatureModule.Webpage.Models

@using System.Diagnostics

<div class="d-block align-self-center center-block graph" style="min-height: 250px;height: 349px;">
    <ChartJsLineChart @ref="_lineChartJs" Config="@_lineChartConfig" Height="300"></ChartJsLineChart>
</div>

@code {
    [CascadingParameter]
    public UnitData[] unitData { get; set; }

    private LineConfig _lineChartConfig;
    private ChartJsLineChart _lineChartJs;

    protected async override Task OnInitializedAsync()
    {
        _lineChartConfig = new LineConfig()
        {
            Options = new ChartJs.Blazor.ChartJS.LineChart.LineOptions()
            {
                MaintainAspectRatio = false,
                Responsive = true,
                Legend = new ChartJs.Blazor.ChartJS.Common.Handlers.Legend
                {
                    Display = false
                },
                Scales = new Scales
                {
                    xAxes = new List<CartesianAxis>
                {
                        new TimeAxis
                        {
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Time"
                            },
                            Position = Position.Bottom,
                            Time = new ChartJs.Blazor.ChartJS.Common.Time.TimeOptions
                            {
                                DisplayFormats = ChartJs.Blazor.ChartJS.Common.Time.TimeDisplayFormats.DE_CH
                            }
                        }
                    },
                    yAxes = new List<CartesianAxis>
                {
                        new LinearCartesianAxis
                        {
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Temp. °C"
                            }

                        }
                    }
                }
            }
        };
    }

    protected override async Task OnParametersSetAsync()
    {
        _lineChartConfig.Data.Datasets.Clear();
        var linechartSet = new LineDataset<ChartJs.Blazor.ChartJS.Common.Time.TimeTuple<double>>()
        {
            BackgroundColor = "#f3ff00",
            BorderColor = "#f3ff00",
            BorderWidth = 2,
            Fill = false,
            PointRadius = 0,
            ShowLine = true
        };

        if (unitData != null)
        {
            foreach (var dataPoint in unitData)
            {
                linechartSet.Add(new TimeTuple<double>(
                    new Moment(dataPoint.DataDateTime)
                    , dataPoint.DataPTValue));
            }

            Debug.WriteLine("Adding {0} values to the graph", linechartSet.Data.Count);
            _lineChartConfig.Data.Datasets.Add(linechartSet);
        }
    }
}
