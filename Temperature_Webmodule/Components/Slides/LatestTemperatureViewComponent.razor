@using  TempraturModul.Models
@using TemperatureModule.Webpage.Models 

<div class="center-block.graph" style="background-color: #1f2833; border-radius:5px">
@if (unitData != null)
{
    <div id="records" style="display:flex; flex-direction:row; flex-wrap: wrap">

        <div id="airRecords" class="order-0" style="display: flex; flex-direction: column;border: 1px solid rgba(0,0,0,.125);">
            
            <HeaderLatestTemperatureComponent Latest="@_airTemperatureUnit.Latest" PTIndex="PTIndex.Air"></HeaderLatestTemperatureComponent>

            <TemperatureListingComponent data="@_airTemperatureUnit.Highest" IsHighest="true" PTIndex="PTIndex.Air"></TemperatureListingComponent>
            <TemperatureListingComponent data="@_airTemperatureUnit.Lowest" IsHighest="false" PTIndex="PTIndex.Air"></TemperatureListingComponent>
            <AverageTemperatureComponent Average="@_airTemperatureUnit.Average" PTIndex="PTIndex.Air"></AverageTemperatureComponent>

        </div>

        <div id="waterRecords" class="order-1" style="display: flex; flex-direction: column; border: 1px solid rgba(0,0,0,.125);">
           
            <HeaderLatestTemperatureComponent Latest="@_waterTemperatureUnit.Latest" PTIndex="PTIndex.Water"></HeaderLatestTemperatureComponent>
 
            <TemperatureListingComponent data="@_waterTemperatureUnit.Highest" IsHighest="true" PTIndex="PTIndex.Water"></TemperatureListingComponent>
            <TemperatureListingComponent data="@_waterTemperatureUnit.Lowest" IsHighest="false" PTIndex="PTIndex.Water"></TemperatureListingComponent>
            <AverageTemperatureComponent Average="@_waterTemperatureUnit.Average" PTIndex="PTIndex.Water"></AverageTemperatureComponent>

        </div>
    </div>
}
else
{
    <div class="d-xl-flex justify-content-xl-start align-items-xl-center" style="padding-top: 12px;padding-left: 20px;padding-bottom: 12px;font-size: 30px;border: 1px solid rgba(0,0,0,.125);">
        <strong>Loading</strong>
    </div>
}
</div>



@code {
    [CascadingParameter]
    public TempraturModul.Models.TempratureDTO[] unitData { get; set; }

    private TemperatureModule.Webpage.Models.LatestTemperatureUnit _airTemperatureUnit;
    private TemperatureModule.Webpage.Models.LatestTemperatureUnit _waterTemperatureUnit;


    protected override async Task OnParametersSetAsync()
    {
        if (unitData != null)
        {
            _airTemperatureUnit = new LatestTemperatureUnit(unitData[0].UnitDataPT.Where(e => e.PTIndex == (int)PTIndex.Air));
            _waterTemperatureUnit = new LatestTemperatureUnit(unitData[0].UnitDataPT.Where(e => e.PTIndex == (int)PTIndex.Water));
        }
    }

}
