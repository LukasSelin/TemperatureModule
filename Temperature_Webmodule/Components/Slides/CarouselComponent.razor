@using TemperatureModuleDatasource
@using System.Diagnostics

@inject IJSRuntime JsRuntime

<div class="carousel slide" data-ride="carousel" data-interval="false" id="carouselExampleIndicators" style="min-height: 75px;">
    <div class="carousel-inner" role="listbox" style="background-color: #1f2833;border-radius: 5px;">
        <CascadingValue Value="UnitData">
            <div class="carousel-item active">
                <GraphComponent/>
            </div>
            <div class="carousel-item">
                <TableViewComponent ></TableViewComponent>
            </div>
            <div class="carousel-item">
                <LatestTemperatureViewComponent ></LatestTemperatureViewComponent>
            </div>
        </CascadingValue>
    </div>
    <div>
        <a id="carouselExampleIndicators-prev" class="carousel-control-prev" role="button" data-slide="prev" style="min-width: 15px;"><span class="carousel-control-prev-icon"></span><span class="sr-only">Previous</span></a>
        <a id="carouselExampleIndicators-next" class="carousel-control-next" role="button" data-slide="next" style="min-width: 15px;"><span class="carousel-control-next-icon"></span><span class="sr-only">Next</span></a>
    </div>
    <ol class="carousel-indicators">
        <li data-target="#carousel-1" data-slide-to="0" class="active"></li>
        <li data-target="#carousel-1" data-slide-to="1"></li>
        <li data-target="#carousel-1" data-slide-to="2"></li>
    </ol>
</div>

@code {
    [Parameter]
    public TempraturModul.Models.TempratureDTO[] UnitData { get; set; }

    bool firstRender = true;

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JsRuntime.InvokeAsync<object>("initializeCarousel");
            firstRender = false;
        }
    }
}
