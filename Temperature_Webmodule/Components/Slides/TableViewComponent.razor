@using TemperatureModuleDatasource
@using TemperatureModule.Webpage.Models

<div class="table-responsive" style="background-color: #1f2833;color: #c5c6c7;min-height: 250px;max-height: 650px;">
    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th style="border-style: none;border-color: rgba(197,198,199,0);">Tidpunkt</th>
                <th style="border-color: rgba(197,198,199,0);">Temperatur (°C)</th>
            </tr>
        </thead>
        <tbody>
            @if (ItemList != null)
            {
                @for (int i = ItemList.Count - 1; 0 < i; i--)
                {
                    <tr>
                        <td>@ItemList[i].DataDateTime.ToShortTimeString()</td>
                        <td>@ItemList[i].DataPTValue</td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>
<div>
    <button class="btn btn-secondary" @onclick="@(e => NavigateTo("first"))">@("<<")</button>
    <button class="btn btn-secondary" @onclick="@(e => NavigateTo("prev"))">Prev</button>
    @for (int i = 0; i < TotalPages; i++)
    {
        var pageNumber = i;
        <button class="btn @(CurrentPage == pageNumber? "btn-dark":"btn-info")"
                @onclick="@(e => UpdateList(pageNumber))">
            @(i + 1)
        </button>
    }
    <button class="btn btn-secondary" @onclick="@(e => NavigateTo("next"))">Next</button>
    <button class="btn btn-secondary" @onclick="@(e => NavigateTo("last"))">@(">>")</button>
</div>

@code {
    [CascadingParameter]
    public UnitData[] unitData { get; set; }

    public List<UnitData> Items { get; set; }

    public List<UnitData> ItemList { get; set; }

    public int PageSize { get; set; }
    public int TotalPages { get; set; }
    public int CurrentPage { get; set; }

    public bool ReloadList { get; set; }

    protected async override Task OnParametersSetAsync()
    {
        PageSize = 10;
        System.Diagnostics.Debug.WriteLine("number of units");

        if (unitData != null)
        {

            Items = unitData.Reverse().ToList();
            ItemList = Items.Take(PageSize).Reverse().ToList();
            System.Diagnostics.Debug.WriteLine("{0} number of units", Items.Count);
            TotalPages = (int)Math.Ceiling(Items.Count() / (decimal)PageSize);
            System.Diagnostics.Debug.WriteLine("{0} total pages", TotalPages);
        }



        base.OnInitialized();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (!firstRender && ReloadList)
        {
            UpdateList();
            ReloadList = false;

            StateHasChanged();
        }

        base.OnAfterRender(firstRender);
    }
    private void UpdateList(int pageNumber = 0)
    {
        if (Items != null)
        {
            //pageNumber * pageSize -> take 5
            ItemList = Items.Skip(pageNumber * PageSize).Take(PageSize).Reverse().ToList();
            TotalPages = (int)Math.Ceiling(Items.Count() / (decimal)PageSize);
            CurrentPage = pageNumber;
        }
    }

    private void NavigateTo(string direction)
    {
        if (direction == "prev" && CurrentPage != 0)
            CurrentPage -= 1;
        if (direction == "next" && CurrentPage != TotalPages - 1)
            CurrentPage += 1;
        if (direction == "first")
            CurrentPage = 0;
        if (direction == "last")
            CurrentPage = TotalPages - 1;

        UpdateList(CurrentPage);
    }


}
